Utilization and Comparison of Convolutional Neural Networks in Malware Recognition

Ahmet Selman Bozkir, Ahmet Ogulcan Cankaya, Murat Aydos
Hacettepe University, Department of Computer Engineering, Ankara, Turkey
E-mail: selman@cs.hacettepe.edu.tr

Abstract— Advances in Industry 4.0, IoT, and mobile systems have led to an increase in the number of malware threats that target these systems. Research shows that classification via the use of computer vision and machine learning methods over byte-level images extracted from malware files could be an effective static solution. In this study, in order to detect malware, we have employed various contemporary convolutional neural networks (ResNet, Inception, DenseNet, VGG, AlexNet) that have proven successful in image classification problems and compared their predictive performance along with the duration of model production and inference. In addition, a novel malware dataset involving 8750 training and 3644 test instances over 25 different classes was proposed and used. As a result of the experiments carried out with 3-channel (RGB) images obtained, the highest accuracy was determined as 97.48% using DenseNet networks.

Keywords— malware; malware detection; convolutional neural networks; computer vision; supervised learning.

I. INTRODUCTION
In recent years, developments in the Internet and information-based systems, particularly in IoT (Internet of Things) and mobile devices, have led to an exponential increase in malware. Malware includes viruses, trojans, adware, and other software designed for malicious purposes that provide various benefits to attackers. According to Aktas and Sen [1], one of the primary objectives of malware development is to obtain unfair financial gain. As a result, the number and variety of malware continue to increase daily [2]. For example, in 2016, there was a 36% increase compared to the previous year, with 430 million different malware instances detected [2].

Malware detection and identification generally involve static and dynamic analysis methods. Static analysis aims to identify patterns within malicious code without executing it, utilizing binary sequences, library calls, opcode frequency distributions, and control flow graphs to create a distinctive signature [3]. On the other hand, dynamic analysis involves executing potentially harmful code within a sandbox or virtual machine to examine its behavioral patterns. While static analysis is efficient in terms of resource consumption and speed, it can be insufficient in detecting polymorphic and metamorphic malware. Conversely, dynamic analysis addresses these weaknesses but is more time and resource-intensive.

As a static analysis-based approach, Nataraj et al. [4] demonstrated that byte sequences from raw binary malware files can be converted into grayscale images, which can then be classified using computer vision and machine learning techniques. The fundamental idea behind this concept is that malware families typically exhibit minor variations. In their initial study, Nataraj et al. [4] utilized GIST descriptors extracted from malware images to perform multi-class malware classification.

With the introduction and widespread adoption of convolutional neural networks (CNNs), a crucial component of deep learning in computer vision, CNNs have been increasingly used in malware image analysis. Recent studies [5,6] have achieved over 97% accuracy by performing end-to-end training directly on raw malware images. Likewise, Saxe and Berlin [7] assessed the effectiveness of deep learning methods on this problem.

A review of related work indicates that most CNN-based malware classification studies have utilized VGG [9] and AlexNet [8] networks or custom architectures. However, CNN techniques have continued to evolve, leading to more efficient network designs with fewer parameters. This study investigates the effectiveness of modern CNN architectures that have been validated for natural image classification since 2012 in the context of malware classification. The contributions of this study are as follows:
- Unlike previous works based on AlexNet and VGG networks, this study evaluates Inception [10], ResNet [11], and DenseNet [12] architectures in various configurations to measure their classification performance and training times.
- Instead of grayscale images, 3-channel RGB images were generated and used in experiments.
- A novel malware dataset named "MaleVis" [13] was created and made publicly available for future research. This dataset consists of raw PE (portable executable) files from different malware families and their corresponding images at varying resolutions.

The rest of the paper is organized as follows: Section 2 introduces the methodology and tools used. Section 3 details the dataset. Section 4 presents the experimental design and results. Finally, Section 5 concludes the study.

II. METHODOLOGY AND TOOLS

A. Convolutional Neural Networks
Convolutional neural networks (CNNs) were first introduced in 2012 by Krizhevsky et al. [8] for the problem of natural image classification, achieving groundbreaking success with the AlexNet architecture. Since then, CNNs have been adapted for various tasks, including object recognition, segmentation, and even text classification. Over time, these deep neural networks have primarily evolved in terms of depth. The Visual Geometry Group (VGG) at Oxford University proposed the VGG networks (VGG-11, VGG-16, VGG-19) [9], which demonstrated higher predictive performance but were computationally expensive in terms of training time and parameter count. Furthermore, VGG networks are susceptible to the vanishing gradient problem if a sufficient amount of training data is not available.

To address these challenges, Szegedy et al. [10] introduced the 22-layer GoogleNet architecture, incorporating "Inception" blocks consisting of 1×1, 3×3, and 5×5 filters, which won the ImageNet 2015 competition. Later, deeper networks were observed to improve predictive performance, but they also faced vanishing gradient issues. To mitigate this, He et al. [11] proposed the ResNet architecture, which allows convolutional layers to bypass intermediate layers by using residual connections, enabling the construction of networks with over 100 layers. Alternatively, Huang et al. [12] proposed the DenseNet architecture, where each layer connects to all subsequent layers through dense blocks and transition layers, using feature concatenation instead of residual summation as in ResNet.

B. Model Training
The CNN models tested throughout the study were trained using the Pytorch v0.4 [15] and Caffe v0.16.1 [16] deep learning frameworks. Instead of using pre-trained models, training was performed from scratch. Since all networks except Inception (GoogleNet) were predefined in Pytorch, Pytorch was used for their training and testing.

III. DATASET
Before this study, an analysis of existing datasets showed that they did not contain raw binary files or were composed of grayscale images, making it impractical for our approach. Therefore, a raw PE file dataset consisting of 25 different families was compiled in collaboration with a cybersecurity firm specializing in malware analysis. The dataset comprises malware samples from 2017-2018. The MaleVis dataset contains a balanced distribution of 500 or nearly 500 samples per family, with a 70%-30% training-test split, totaling 8750 training and 3644 test instances.

IV. EXPERIMENTAL DESIGN AND RESULTS

A. Experimental Process
ResNet18, despite having fewer layers, achieved an accuracy of 97.18%, making it the second-best performing model. Its efficiency in parameter utilization, fast training, and quick validation of 3644 images in just 5 seconds highlight its practicality. Although VGG networks have been validated in previous studies, they lag behind newer architectures. Results indicate that the number of convolutional layers does not significantly impact classification success, while effective feature extraction and propagation play a more critical role. The fast convergence of DenseNet models further supports this observation.

V. CONCLUSION
This study tested multiple CNN architectures on a newly proposed malware dataset. The results highlight the superior performance of DenseNet and ResNet models. Future research will explore open-set classification by integrating both malware and benign software in a unified framework.

ACKNOWLEDGMENT
The authors thank Comodo Inc. for providing the malware dataset used in this study.


